version: 2.1

orbs:
  base: dialogue/base@1.23.1
  release: dialogue/release@2.19.1
  python: dialogue/python@3.22.5
  utils: dialogue/utils@3.19.1
  codecov: codecov/codecov@4.1.0

aliases:
  - &executor
    executor:
      name: python/python
      version: "3.12.3"

executors:
  python-postgres:
    parameters:
      python_version:
        type: string
        default: "3.12.3"
    docker:
      - image: cimg/python:<< parameters.python_version >>
      - image: postgres:16.3
        name: postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust

workflows:
  ci:
    jobs:
      - python/lint:
          name: ðŸ‘® lint
          <<: *executor
          context: code-validator
      
      - python/run:
          name: ðŸ‘® mypy
          run: mypy .
          <<: *executor
          context: code-validator
      
      - test:
          name: ðŸ§ª test py<<matrix.python_version>> sqlalchemy-<<matrix.sqlalchemy_version >> pydantic-<<matrix.pydantic_version>> <<matrix.asyncpg>> <<matrix.aws_rds_iam>>
          context: code-validator
          matrix:
            parameters:
              python_version: ["3.9", "3.10", "3.11", "3.12"]
              sqlalchemy_version: ["1.4", "2.0", "2.0-sqlmodel"]
              asyncpg: ["asyncpg", "noasyncpg"]
              aws_rds_iam: ["aws_rds_iam", "noaws_rds_iam"]
              pydantic_version: ["1", "2"]
      
      - release/release:
          name: ðŸ•Š release
          requires:
            - test
            - ðŸ‘® lint
            - ðŸ‘® mypy
          context:
            - slack-release
            - base-github-ci
          filters:
            branches:
              only: master

  publish:
    jobs:
      - publish:
          name: ðŸš€ publish
          context: code-validator # Needed to build, the upload token is in the CI env vars
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:
  test:
    environment:
      CACHE_VERSION: "2022-11-15T12:56:00.000000"
    parameters:
      python_version:
        type: enum
        enum: ["3.9", "3.10", "3.11", "3.12"]
        description: |
          Specify which version of python to run the tests against
      sqlalchemy_version:
        type: enum
        enum: ["2.0-sqlmodel", "2.0", "1.4", "1.3"]
        description: |
          Specify which version of sqlalchemy to run the tests against
      asyncpg:
        type: enum
        enum: ["asyncpg", "noasyncpg"]
        description: To run tests with and without asyncpg installed.
      aws_rds_iam:
        type: enum
        enum: ["aws_rds_iam", "noaws_rds_iam"]
        description: To run tests with and without asyncpg installed.
      pydantic_version:
        type: enum
        enum: ["1", "2"]
    executor:
      name: python-postgres
      python_version: <<parameters.python_version>>
    working_directory: ~/project/.
    steps:
      - base/setup
      - python/setup
      - python/install_deps
      - utils/with_cache:
          namespace: tox
          key: 'python<<parameters.python_version>>-sqlalchemy<<parameters.sqlalchemy_version>>-pydantic<<parameters.pydantic_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}'
          path: ~/project/.tox
          strict: true
          steps:
            - run:
                name: "run tox using sqlalchemy <<parameters.sqlalchemy_version>>.* pydantic<<parameters.pydantic_version>> and -<<parameters.asyncpg>> and -<<parameters.aws_rds_iam>>"
                command: |
                  poetry run tox -e sqlalchemy<<parameters.sqlalchemy_version>>-pydantic<<parameters.pydantic_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>
      - codecov/upload:
          flags: python_version<<parameters.python_version>>-sqlalchemy<<parameters.sqlalchemy_version>>-pydantic<<parameters.pydantic_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>


  publish:
    <<: *executor
    working_directory: ~/project/.
    steps:
      - base/setup
      - python/setup
      - run:
          name: "publish package on pypi"
          command: |
            poetry config http-basic.pypi __token__ $PYPI_TOKEN
            poetry publish --build --no-interaction
