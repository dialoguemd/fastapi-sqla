version: 2.1

orbs:
  base: dialogue/base@1.12.0
  release: dialogue/release@2.6.1
  python: dialogue/python@3.4.1
  utils: dialogue/utils@3.7.0

workflows:
  ci:
    jobs:
      - python/pylama:
          name: pylama
          context: gemfury-download
      - python/isort:
          name: isort
          context: gemfury-download
      - python/black:
          name: black
          context: gemfury-download
      - python/run:
          name: mypy
          run: mypy .
          executor: python
          context: gemfury-download
      - test:
          context: gemfury-download
          matrix:
            parameters:
              python_version: ["3.9", "3.10"]
              sqlalchemy_version: ["1.3", "1.4"]
              asyncpg: ["asyncpg", "noasyncpg"]
              aws_rds_iam: ["aws_rds_iam", "noaws_rds_iam"]
      - release/release:
          name: release
          requires:
            - pylama
            - black
            - isort
            - test
          context: org-global-v2
          filters:
            branches:
              only: master

  publish:
    jobs:
      - publish:
          name: publish
          context: org-global-v2
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:

  test:
    environment:
      CACHE_VERSION: "2022-11-15T12:56:00.000000"
    parameters:
      python_version:
        type: enum
        enum: ["3.9", "3.10"]
        description: |
          Specify which version of python to run the tests against
      sqlalchemy_version:
        type: enum
        enum: ["1.4", "1.3"]
        description: |
          Specify which version of sqlalchemy to run the tests against
      asyncpg:
        type: enum
        enum: ["asyncpg", "noasyncpg"]
        description: To run tests with and without asyncpg installed.
      aws_rds_iam:
        type: enum
        enum: ["aws_rds_iam", "noaws_rds_iam"]
        description: To run tests with and without asyncpg installed.
    executor:
      name: python-postgres
      python_version: <<parameters.python_version>>
    working_directory: ~/project/.
    steps:
      - base/setup
      - python/setup
      - utils/with_cache:
          key: 'python<<parameters.python_version>>-sqlalchemy<<parameters.sqlalchemy_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}'
          namespace: tox
          path: ~/project/.tox
          steps:
            - run:
                name: "install tox"
                command: |
                  poetry run pip install -U tox
            - run:
                name: "run tox using sqlalchemy <<parameters.sqlalchemy_version>>.* and -<<parameters.asyncpg>> and -<<parameters.aws_rds_iam>>"
                command: |
                  poetry run tox -e sqlalchemy<<parameters.sqlalchemy_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>
      - store_test_results:
          path: test-reports
      - utils/send_coverage_to_codecov:
          codecov_flag: python_version<<parameters.python_version>>-sqlalchemy<<parameters.sqlalchemy_version>>-<<parameters.asyncpg>>-<<parameters.aws_rds_iam>>

  publish:
    docker:
    - image: cimg/python:latest
      auth:
        username: $DOCKERHUB_USER
        password: $DOCKERHUB_ACCESS_TOKEN
    working_directory: ~/project/.
    steps:
      - base/setup
      - python/setup
      - run:
          name: "publish package on pypi"
          command: |
            poetry config http-basic.pypi __token__ $PYPI_TOKEN
            poetry publish --build --no-interaction

executors:
  python:
    docker:
      - image: cimg/python:3.10
  python-postgres:
    parameters:
      python_version:
        type: string
        default: "3.10"
    docker:
      - image: cimg/python:<< parameters.python_version >>
      - image: postgres:14.4
        name: postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
