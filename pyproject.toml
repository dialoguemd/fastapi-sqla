[tool.poetry]
name = "fastapi-sqla"
version = "3.1.2"
description = "SQLAlchemy extension for FastAPI with support for pagination, asyncio, SQLModel, and pytest, ready for production."
authors = [
    "Hadrien David <hadrien.david@dialogue.co>",
    "Victor Repkow <victor.repkow@dialogue.co>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/dialoguemd/fastapi-sqla"
keywords = ["FastAPI", "SQLAlchemy", "asyncio", "pytest", "alembic"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Programming Language :: SQL",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = ">=0.95.1"
pydantic = ">=1"
sqlalchemy = ">=1.3"
structlog = ">=20"

alembic = { version = "^1.4.3", optional = true}
asgi_lifespan = { version = "^1.0.1", optional = true}
asyncpg = {version = "^0.28.0", optional = true}
Faker = {version = "^14.2.0", optional = true}
httpx = {version = "^0.23.0", optional = true}
pdbpp = { version = "^0.10.2", optional = true}
psycopg2 = { version = "^2.8.6", optional = true}
pytest = {version = "^7.2.1", optional = true}
pytest-asyncio = {version = "^0.19.0", optional = true}
pytest-cov = { version = "^2.10.1", optional = true}
ruff = {version = "^0.4.5", optional = true}
tox = {version = "^3.26.0", optional = true}
boto3 = {version = "^1.24.74", optional = true}
greenlet = {version = "^3.0.3", optional = true}
mypy = {version = "^1.0.0", extras = ["tests"], optional = true}
sqlmodel = { version = "^0.0.14", optional = true }

[tool.poetry.extras]
# Test dependencies as extras so they can be set as extras in tox config
# More info on https://github.com/python-poetry/poetry/issues/1941
tests = [
    "alembic",
    "asgi_lifespan",
    "coverage",
    "Faker",
    "greenlet",
    "httpx",
    "mypy",
    "pdbpp",
    "psycopg2",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-watch",
    "ruff",
    "tox",
]
asyncpg = ["asyncpg"]
aws_rds_iam = ["boto3"]
sqlmodel = ["sqlmodel"]

[build-system]
requires = ["poetry>=1.3.0"]
build-backend = "poetry.masonry.api"

[tool.semantic_release]
version_variable = "pyproject.toml:version"
upload_to_pypi = false
commit_message = "Version generated by python-semantic-release [ci skip]"

[tool.poetry.plugins."pytest11"]
fastapi-sqla = "fastapi_sqla._pytest_plugin"

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "N", # pep8-naming
  "D", # pydocstyle
  "UP", # pyupgrade
  "ASYNC", # flake8-async
  "S", # flake8-bandit
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "SIM", # flake8-simplify
  "TD", # flake8-todos
  "ERA", # eradicate
  "PL", # pylint
  "RUF" # ruff
]

# Ignore some pydocstyle rules that Google convention enables
ignore = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D212",
  "D415",
  "B008", # Enable using functions in default function args. Easier to work with FastAPI dependencies that way
  "C408", # Enable using dict/list/tuple
  "PLR0911", # Disable max number of return
  "PLR0912", # Disable max number of branches
  "PLR0913", # Disable max number of args
  "PLR0915", # Disable max number of statements
  "PLR2004", # Enable magic values
  "SIM105", # Allow using try - except - pass
  "TD001", # Enable FIXMEs
  "TD002", # Enable TODOs without author
  "TD003", # Enable TODOs without issue link
  "N802", # FastAPI dependency conventions is title cased
  "N803", # Same as N802
  "N806", # Same as N802
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
  "S101", # Enable assert
  "S105", # Disable passwords check
  "S106", # Disable passwords check
  "S608", # Allow SQL string construction
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = "tests"
norecursedirs = ".git,.venv"
xfail_strict = "true"
addopts = """
    -p no:fastapi-sqla
    --cov-config pyproject.toml
    --cov-report term
    --cov-report term-missing
"""

# https://nedbatchelder.com/blog/201810/why_warnings_is_mysterious.html
filterwarnings = [
    "error:.*removed in version 2.0.*:",
]

[tool.pytest-watch.run]
ext = ".py, .yaml, .cfg"

[tool.coverage.run]
branch = true
omit = [
    "tests/*",
    ".venv/*"
]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
skip_covered = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = sqlalchemy{ 1.3, 1.4, 2.0, 2.0-sqlmodel }-{ asyncpg, noasyncpg }-{aws_rds_iam, noaws_rds_iam }-pydantic{ 1, 2 }

[testenv]
passenv = CI
deps =
    sqlalchemy1.3: sqlalchemy<1.4
    sqlalchemy1.4: sqlalchemy>=1.4,<2
    sqlalchemy2.0: sqlalchemy>=2
    sqlalchemy2.0-sqlmodel: sqlalchemy>=2
    sqlalchemy2.0-sqlmodel: sqlmodel
    asyncpg: asyncpg
    aws_rds_iam: boto3
    pydantic1: pydantic<2
    pydantic2: pydantic>=2

extras =
    tests

commands = pytest -vv --cov={envsitepackagesdir}/fastapi_sqla --cov-report xml --cov-report html --junitxml=test-reports/pytest/junit.xml
"""

[tool.mypy]
exclude = ["tests"]
ignore_missing_imports = true
plugins = "sqlalchemy.ext.mypy.plugin"
